{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=130.0.6723.116)\nStacktrace:\n#0 0x64f3927166da <unknown>\n#1 0x64f39222addd <unknown>\n#2 0x64f39226e3b2 <unknown>\n#3 0x64f39229bbb2 <unknown>\n#4 0x64f39226c508 <unknown>\n#5 0x64f39229bd7e <unknown>\n#6 0x64f3922ba69d <unknown>\n#7 0x64f39229b953 <unknown>\n#8 0x64f39226a72e <unknown>\n#9 0x64f39226b79e <unknown>\n#10 0x64f3926e1f1b <unknown>\n#11 0x64f3926e5eb8 <unknown>\n#12 0x64f3926cf42c <unknown>\n#13 0x64f3926e6a37 <unknown>\n#14 0x64f3926b3fef <unknown>\n#15 0x64f392704ad8 <unknown>\n#16 0x64f392704ca0 <unknown>\n#17 0x64f392715556 <unknown>\n#18 0x78727e897b5a <unknown>", "trace": "self = <tests.test_login.TestLogin object at 0x714eba04d290>\ninitialize_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"72824c99faa0e6f474eae3dc5ea8149d\")>\n\n    def test_login(self, initialize_driver):\n      home_page = HomePage(initialize_driver)\n      home_page.logout()\n      signin = home_page.click_login()\n>     signin.enter_email(TestData.email)\n\ntests/test_login.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/signin_page.py:20: in enter_email\n    self.set(value, self.login_field)\nsrc/base_page.py:51: in set\n    self.find(locator).clear()\nmy_project_venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:117: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nmy_project_venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nmy_project_venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x714eba020710>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#16 0x64f392704ca0 \\\\u003Cunknown>\\\\n#17 0x64f392715556 \\\\u003Cunknown>\\\\n#18 0x78727e897b5a \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=130.0.6723.116)\nE       Stacktrace:\nE       #0 0x64f3927166da <unknown>\nE       #1 0x64f39222addd <unknown>\nE       #2 0x64f39226e3b2 <unknown>\nE       #3 0x64f39229bbb2 <unknown>\nE       #4 0x64f39226c508 <unknown>\nE       #5 0x64f39229bd7e <unknown>\nE       #6 0x64f3922ba69d <unknown>\nE       #7 0x64f39229b953 <unknown>\nE       #8 0x64f39226a72e <unknown>\nE       #9 0x64f39226b79e <unknown>\nE       #10 0x64f3926e1f1b <unknown>\nE       #11 0x64f3926e5eb8 <unknown>\nE       #12 0x64f3926cf42c <unknown>\nE       #13 0x64f3926e6a37 <unknown>\nE       #14 0x64f3926b3fef <unknown>\nE       #15 0x64f392704ad8 <unknown>\nE       #16 0x64f392704ca0 <unknown>\nE       #17 0x64f392715556 <unknown>\nE       #18 0x78727e897b5a <unknown>\n\nmy_project_venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "stdout", "source": "08baa16c-3399-45ff-9d76-6239b22eeb60-attachment.txt", "type": "text/plain"}], "start": 1731581586819, "stop": 1731581588479, "uuid": "558de80d-37a0-4516-943e-c81ef5b287a2", "historyId": "2116f0ad00ab1de0effc54f114dd9496", "testCaseId": "2116f0ad00ab1de0effc54f114dd9496", "fullName": "tests.test_login.TestLogin#test_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "aelita-hp-pavilion"}, {"name": "thread", "value": "128165-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}