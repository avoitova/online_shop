{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=130.0.6723.116)\nStacktrace:\n#0 0x5c196071a6da <unknown>\n#1 0x5c196022ef80 <unknown>\n#2 0x5c19602052ef <unknown>\n#3 0x5c19602a7eed <unknown>\n#4 0x5c19602bdf49 <unknown>\n#5 0x5c196029f953 <unknown>\n#6 0x5c196026e72e <unknown>\n#7 0x5c196026f79e <unknown>\n#8 0x5c19606e5f1b <unknown>\n#9 0x5c19606e9eb8 <unknown>\n#10 0x5c19606d342c <unknown>\n#11 0x5c19606eaa37 <unknown>\n#12 0x5c19606b7fef <unknown>\n#13 0x5c1960708ad8 <unknown>\n#14 0x5c1960708ca0 <unknown>\n#15 0x5c1960719556 <unknown>\n#16 0x7700d5297b5a <unknown>", "trace": "self = <tests.test_login.TestLogin object at 0x77563842c050>\ninitialize_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"45e1983657a3cc2c1501bdc7a6ae539b\")>\n\n    def test_login(self, initialize_driver):\n      home_page = HomePage(initialize_driver)\n      home_page.logout()\n      signin = home_page.click_login()\n      signin.enter_email(TestData.email)\n      signin.enter_password(TestData.password)\n      home_page.enter_account_page()\n>     actual_user_name = home_page.get_attribute_value()\n\ntests/test_login.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/base_page.py:59: in get_attribute_value\n    el = self.driver.find_element(By.XPATH,\"//input[@name='name']\")\nmy_project_venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:766: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmy_project_venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x77563881c810>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x5c1960708ca0 \\\\u003Cunknown>\\\\n#15 0x5c1960719556 \\\\u003Cunknown>\\\\n#16 0x7700d5297b5a \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=130.0.6723.116)\nE       Stacktrace:\nE       #0 0x5c196071a6da <unknown>\nE       #1 0x5c196022ef80 <unknown>\nE       #2 0x5c19602052ef <unknown>\nE       #3 0x5c19602a7eed <unknown>\nE       #4 0x5c19602bdf49 <unknown>\nE       #5 0x5c196029f953 <unknown>\nE       #6 0x5c196026e72e <unknown>\nE       #7 0x5c196026f79e <unknown>\nE       #8 0x5c19606e5f1b <unknown>\nE       #9 0x5c19606e9eb8 <unknown>\nE       #10 0x5c19606d342c <unknown>\nE       #11 0x5c19606eaa37 <unknown>\nE       #12 0x5c19606b7fef <unknown>\nE       #13 0x5c1960708ad8 <unknown>\nE       #14 0x5c1960708ca0 <unknown>\nE       #15 0x5c1960719556 <unknown>\nE       #16 0x7700d5297b5a <unknown>\n\nmy_project_venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "stdout", "source": "6bb2db0a-c58c-469d-a2be-b96d23f4f013-attachment.txt", "type": "text/plain"}], "start": 1731596981504, "stop": 1731596986688, "uuid": "de92b2a1-d1e4-4338-abc7-239aa41b736d", "historyId": "2116f0ad00ab1de0effc54f114dd9496", "testCaseId": "2116f0ad00ab1de0effc54f114dd9496", "fullName": "tests.test_login.TestLogin#test_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "aelita-hp-pavilion"}, {"name": "thread", "value": "133324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}